// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisterUserHandlerFunc turns a function with the right signature into a register user handler
type RegisterUserHandlerFunc func(RegisterUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterUserHandlerFunc) Handle(params RegisterUserParams) middleware.Responder {
	return fn(params)
}

// RegisterUserHandler interface for that can handle valid register user params
type RegisterUserHandler interface {
	Handle(RegisterUserParams) middleware.Responder
}

// NewRegisterUser creates a new http.Handler for the register user operation
func NewRegisterUser(ctx *middleware.Context, handler RegisterUserHandler) *RegisterUser {
	return &RegisterUser{Context: ctx, Handler: handler}
}

/*
	RegisterUser swagger:route POST /register auth registerUser

RegisterUser register user API
*/
type RegisterUser struct {
	Context *middleware.Context
	Handler RegisterUserHandler
}

func (o *RegisterUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterUserBody register user body
//
// swagger:model RegisterUserBody
type RegisterUserBody struct {

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this register user body
func (o *RegisterUserBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register user body based on context it is used
func (o *RegisterUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterUserBody) UnmarshalBinary(b []byte) error {
	var res RegisterUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterUserOKBody register user o k body
//
// swagger:model RegisterUserOKBody
type RegisterUserOKBody struct {

	// code
	Code float64 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this register user o k body
func (o *RegisterUserOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register user o k body based on context it is used
func (o *RegisterUserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterUserOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
