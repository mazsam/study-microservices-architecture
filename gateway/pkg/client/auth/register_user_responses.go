// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RegisterUserReader is a Reader for the RegisterUser structure.
type RegisterUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRegisterUserOK creates a RegisterUserOK with default headers values
func NewRegisterUserOK() *RegisterUserOK {
	return &RegisterUserOK{}
}

/*
RegisterUserOK describes a response with status code 200, with default header values.

create user
*/
type RegisterUserOK struct {
	Payload *RegisterUserOKBody
}

// IsSuccess returns true when this register user o k response has a 2xx status code
func (o *RegisterUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register user o k response has a 3xx status code
func (o *RegisterUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user o k response has a 4xx status code
func (o *RegisterUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register user o k response has a 5xx status code
func (o *RegisterUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register user o k response a status code equal to that given
func (o *RegisterUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *RegisterUserOK) Error() string {
	return fmt.Sprintf("[POST /register][%d] registerUserOK  %+v", 200, o.Payload)
}

func (o *RegisterUserOK) String() string {
	return fmt.Sprintf("[POST /register][%d] registerUserOK  %+v", 200, o.Payload)
}

func (o *RegisterUserOK) GetPayload() *RegisterUserOKBody {
	return o.Payload
}

func (o *RegisterUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RegisterUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RegisterUserBody register user body
swagger:model RegisterUserBody
*/
type RegisterUserBody struct {

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this register user body
func (o *RegisterUserBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register user body based on context it is used
func (o *RegisterUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterUserBody) UnmarshalBinary(b []byte) error {
	var res RegisterUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RegisterUserOKBody register user o k body
swagger:model RegisterUserOKBody
*/
type RegisterUserOKBody struct {

	// code
	Code float64 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this register user o k body
func (o *RegisterUserOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register user o k body based on context it is used
func (o *RegisterUserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterUserOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
