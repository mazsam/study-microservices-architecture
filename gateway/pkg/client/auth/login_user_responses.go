// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoginUserReader is a Reader for the LoginUser structure.
type LoginUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLoginUserOK creates a LoginUserOK with default headers values
func NewLoginUserOK() *LoginUserOK {
	return &LoginUserOK{}
}

/*
LoginUserOK describes a response with status code 200, with default header values.

create user
*/
type LoginUserOK struct {
	Payload *LoginUserOKBody
}

// IsSuccess returns true when this login user o k response has a 2xx status code
func (o *LoginUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login user o k response has a 3xx status code
func (o *LoginUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user o k response has a 4xx status code
func (o *LoginUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login user o k response has a 5xx status code
func (o *LoginUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login user o k response a status code equal to that given
func (o *LoginUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *LoginUserOK) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginUserOK  %+v", 200, o.Payload)
}

func (o *LoginUserOK) String() string {
	return fmt.Sprintf("[POST /login][%d] loginUserOK  %+v", 200, o.Payload)
}

func (o *LoginUserOK) GetPayload() *LoginUserOKBody {
	return o.Payload
}

func (o *LoginUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
LoginUserBody login user body
swagger:model LoginUserBody
*/
type LoginUserBody struct {

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this login user body
func (o *LoginUserBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this login user body based on context it is used
func (o *LoginUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserBody) UnmarshalBinary(b []byte) error {
	var res LoginUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
LoginUserOKBody login user o k body
swagger:model LoginUserOKBody
*/
type LoginUserOKBody struct {

	// code
	Code float64 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this login user o k body
func (o *LoginUserOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this login user o k body based on context it is used
func (o *LoginUserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserOKBody) UnmarshalBinary(b []byte) error {
	var res LoginUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
